gates.log <- add_manual_classification(OPP_sub, "beads", "chl_small", "pe")#
gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe", gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "chl_small", "pe", gates.log)#
#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe")   # When there are no beads to be found, start here.#
#gates.log <- add_auto_classification("synecho", "fsc_small", "pe", position=c(FALSE,TRUE), gates=c(2.0, NA), scale=0.975, gates.log=gates.log)#
gates.log <- add_manual_classification(OPP_sub, "croco", "chl_small", "pe", gates.log)#
gates.log <- add_auto_classification("prochloro", "fsc_small", "chl_small",  position=c(FALSE, TRUE), gates=c(2, 0.4), min_pe = 1.5, scale=0.975, gates.log=gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "prochloro", "fsc_small", "chl_small", gates.log)#
gates.log <- add_manual_classification(OPP_sub, "picoeuk", "fsc_small", "chl_small", gates.log)#
#
### Check classification#
VCT <- classify_opp(data.frame(OPP), gates.log)#
VCT$file_id <- OPP$file_id#
#
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "chl_small"))
gates.log <- add_auto_classification("prochloro", "fsc_small", "chl_small",  position=c(FALSE, TRUE), gates=c(1.75, 0.4), min_pe = 1.5, scale=0.975, gates.log=gates.log)
VCT <- classify_opp(data.frame(OPP), gates.log)#
VCT$file_id <- OPP$file_id#
#
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "chl_small"))
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "pe"))
try(plot_histogram(VCT, para.x = "fsc_small"))
try(plot_histogram(VCT, para.x = "chl_small"))
gating_id <- save_gating_params(db, gates.log)#
full_bucket_plan$gating_id[which(full_bucket_plan$bucket == b)] <- gating_id#
#
#################
### CLASSIFY ####
#################
#
save(full_bucket_plan, file = paste0(save_path, cruise, "_bucket_gating_plan.Rdata"))
ach cruise section separately, primarily by controlling the opp.list#
#
i <- 6 # bucket index; 8 for this cruise.#
b <- i #- 1 # In this case there were no unassigned bucketss#
#
this_opp_list <- buckets[[i]]#
#this_opp_list <- missed # Didn't get into a bucket#
#
dd <- round(seq(1, length(this_opp_list), length.out = 25))#
#dd <- seq(1, length(this_opp_list))#
#
# Check snapshots across bucket#
OPP <- get_opp_by_file(db, opp_dir, file_ids = this_opp_list[dd])#
#
#quartz()#
try(plot_cytogram(OPP, para.x="fsc_small", para.y="chl_small"))
# Concatenate for gating#
if(nrow(OPP) < 200000){#
    OPP_sub <- OPP#
}else{#
OPP_sub <- dplyr::sample_n(OPP, 200000)#
}#
OPP_cat <- OPP_sub#
OPP_cat$file_id <- paste0('Bucket ', b)#
#
p <- list()#
    p[[1]] <-  plot_cytogram(OPP_cat, para.x="fsc_small", para.y="chl_small")#
    p[[2]] <- plot_cytogram(OPP_cat, para.x="fsc_small", para.y="pe")#
    p[[3]] <- plot_cytogram(OPP_cat, para.x="chl_small", para.y="pe")#
    p[[4]] <- plot_histogram(OPP_cat, para.x = "chl_small")#
    tx <- textGrob(this_opp_list[1])#
grid.arrange(grobs = p, top = tx, nrow = 2)
gates.log <- add_manual_classification(OPP_sub, "beads", "chl_small", "pe")#
gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe", gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "chl_small", "pe", gates.log)#
#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe")   # When there are no beads to be found, start here.#
#gates.log <- add_auto_classification("synecho", "fsc_small", "pe", position=c(FALSE,TRUE), gates=c(2.0, NA), scale=0.975, gates.log=gates.log)#
gates.log <- add_manual_classification(OPP_sub, "croco", "chl_small", "pe", gates.log)#
gates.log <- add_auto_classification("prochloro", "fsc_small", "chl_small",  position=c(FALSE, TRUE), gates=c(1.75, 0.4), min_pe = 1.5, scale=0.975, gates.log=gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "prochloro", "fsc_small", "chl_small", gates.log)#
gates.log <- add_manual_classification(OPP_sub, "picoeuk", "fsc_small", "chl_small", gates.log)#
#
### Check classification#
VCT <- classify_opp(data.frame(OPP), gates.log)#
VCT$file_id <- OPP$file_id#
#
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "chl_small"))
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "pe"))
try(plot_histogram(VCT, para.x = "fsc_small"))
try(plot_histogram(VCT, para.x = "chl_small"))
gating_id <- save_gating_params(db, gates.log)#
full_bucket_plan$gating_id[which(full_bucket_plan$bucket == b)] <- gating_id#
#
#################
### CLASSIFY ####
#################
#
save(full_bucket_plan, file = paste0(save_path, cruise, "_bucket_gating_plan.Rdata"))
i <- 7 # bucket index; 8 for this cruise.#
b <- i #- 1 # In this case there were no unassigned bucketss#
#
this_opp_list <- buckets[[i]]#
#this_opp_list <- missed # Didn't get into a bucket#
#
dd <- round(seq(1, length(this_opp_list), length.out = 25))#
#dd <- seq(1, length(this_opp_list))#
#
# Check snapshots across bucket#
OPP <- get_opp_by_file(db, opp_dir, file_ids = this_opp_list[dd])#
#
#quartz()#
try(plot_cytogram(OPP, para.x="fsc_small", para.y="chl_small"))
# Concatenate for gating#
if(nrow(OPP) < 200000){#
    OPP_sub <- OPP#
}else{#
OPP_sub <- dplyr::sample_n(OPP, 200000)#
}#
OPP_cat <- OPP_sub#
OPP_cat$file_id <- paste0('Bucket ', b)#
#
p <- list()#
    p[[1]] <-  plot_cytogram(OPP_cat, para.x="fsc_small", para.y="chl_small")#
    p[[2]] <- plot_cytogram(OPP_cat, para.x="fsc_small", para.y="pe")#
    p[[3]] <- plot_cytogram(OPP_cat, para.x="chl_small", para.y="pe")#
    p[[4]] <- plot_histogram(OPP_cat, para.x = "chl_small")#
    tx <- textGrob(this_opp_list[1])#
grid.arrange(grobs = p, top = tx, nrow = 2)
#gates.log <- add_manual_classification(OPP_sub, "beads", "fsc_small", "pe")#
gates.log <- add_manual_classification(OPP_sub, "beads", "chl_small", "pe")#
gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe", gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "chl_small", "pe", gates.log)#
#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe")   # When there are no beads to be found, start here.#
#gates.log <- add_auto_classification("synecho", "fsc_small", "pe", position=c(FALSE,TRUE), gates=c(2.0, NA), scale=0.975, gates.log=gates.log)#
gates.log <- add_manual_classification(OPP_sub, "croco", "chl_small", "pe", gates.log)#
gates.log <- add_auto_classification("prochloro", "fsc_small", "chl_small",  position=c(FALSE, TRUE), gates=c(1.75, 0.4), min_pe = 1.75, scale=0.975, gates.log=gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "prochloro", "fsc_small", "chl_small", gates.log)#
gates.log <- add_manual_classification(OPP_sub, "picoeuk", "fsc_small", "chl_small", gates.log)#
#
### Check classification#
VCT <- classify_opp(data.frame(OPP), gates.log)#
VCT$file_id <- OPP$file_id#
#
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "chl_small"))
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "pe"))
try(plot_histogram(VCT, para.x = "fsc_small"))
try(plot_histogram(VCT, para.x = "chl_small"))
gating_id <- save_gating_params(db, gates.log)#
full_bucket_plan$gating_id[which(full_bucket_plan$bucket == b)] <- gating_id#
#
#################
### CLASSIFY ####
#################
#
save(full_bucket_plan, file = paste0(save_path, cruise, "_bucket_gating_plan.Rdata"))
i <- 8 # bucket index; 8 for this cruise.#
b <- i #- 1 # In this case there were no unassigned bucketss#
#
this_opp_list <- buckets[[i]]#
#this_opp_list <- missed # Didn't get into a bucket#
#
dd <- round(seq(1, length(this_opp_list), length.out = 25))#
#dd <- seq(1, length(this_opp_list))#
#
# Check snapshots across bucket#
OPP <- get_opp_by_file(db, opp_dir, file_ids = this_opp_list[dd])#
#
#quartz()#
try(plot_cytogram(OPP, para.x="fsc_small", para.y="chl_small"))
# Concatenate for gating#
if(nrow(OPP) < 200000){#
    OPP_sub <- OPP#
}else{#
OPP_sub <- dplyr::sample_n(OPP, 200000)#
}#
OPP_cat <- OPP_sub#
OPP_cat$file_id <- paste0('Bucket ', b)#
#
p <- list()#
    p[[1]] <-  plot_cytogram(OPP_cat, para.x="fsc_small", para.y="chl_small")#
    p[[2]] <- plot_cytogram(OPP_cat, para.x="fsc_small", para.y="pe")#
    p[[3]] <- plot_cytogram(OPP_cat, para.x="chl_small", para.y="pe")#
    p[[4]] <- plot_histogram(OPP_cat, para.x = "chl_small")#
    tx <- textGrob(this_opp_list[1])#
grid.arrange(grobs = p, top = tx, nrow = 2)
#gates.log <- add_manual_classification(OPP_sub, "beads", "fsc_small", "pe")#
gates.log <- add_manual_classification(OPP_sub, "beads", "chl_small", "pe")#
gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe", gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "chl_small", "pe", gates.log)#
#
#gates.log <- add_manual_classification(OPP_sub, "synecho", "fsc_small", "pe")   # When there are no beads to be found, start here.#
#gates.log <- add_auto_classification("synecho", "fsc_small", "pe", position=c(FALSE,TRUE), gates=c(2.0, NA), scale=0.975, gates.log=gates.log)#
gates.log <- add_manual_classification(OPP_sub, "croco", "chl_small", "pe", gates.log)#
gates.log <- add_auto_classification("prochloro", "fsc_small", "chl_small",  position=c(FALSE, TRUE), gates=c(1.75, 0.4), min_pe = 1.75, scale=0.975, gates.log=gates.log)#
#gates.log <- add_manual_classification(OPP_sub, "prochloro", "fsc_small", "chl_small", gates.log)#
gates.log <- add_manual_classification(OPP_sub, "picoeuk", "fsc_small", "chl_small", gates.log)#
#
### Check classification#
VCT <- classify_opp(data.frame(OPP), gates.log)#
VCT$file_id <- OPP$file_id#
#
try(plot_vct_cytogram(VCT, para.x = "fsc_small", para.y = "chl_small"))
gating_id <- save_gating_params(db, gates.log)#
full_bucket_plan$gating_id[which(full_bucket_plan$bucket == b)] <- gating_id#
#
#################
### CLASSIFY ####
#################
#
save(full_bucket_plan, file = paste0(save_path, cruise, "_bucket_gating_plan.Rdata"))
sum(is.na(full_bucket_plan$gating_id))  # Check for any missed files
gating_plan <- update_plan_table(db, full_bucket_plan, check = TRUE)#
save_gating_plan(db, gating_plan)
n <- parallel::detectCores()#
classify_opp_files(db, opp_dir = opp_dir, NULL, vct_dir = vct_dir, cores = (n-2))#
beepr::beep()
library(beepr)#
#
source('~/Documents/SeaFlow/cytogram_movie_streamline_pop4.R')#
#
cruise <- "HOT338"#
#
path <- '/Users/annettehynes/Library/CloudStorage/GoogleDrive-ahynes@uw.edu/Shared drives/SeaFlow-VCT/parquet/'#
save_path <- "~/Documents/SeaFlow/Cruise_data/"#
#
# OPP Cytogram#
#
db <- paste0(save_path, cruise, "/", cruise, ".db")#
od <- paste0(path, cruise, "/", cruise, "_opp")#
fd <- paste0(save_path, cruise, "/", cruise, "_figs")#
md <- paste0(save_path, cruise)
vd <- paste0(save_path, cruise, "/", cruise, "_vct")#
fd <- paste0(save_path, cruise, "/", cruise, "_vct_figs")#
#
cytogram_movie(db = db, opp_dir = od, vct_dir = vd, fig_dir = fd, mov_dir = md)#
beepr::beep()
q()
library(popcycle)
help(package = popcycle)
boo <- popcycle::read_refractive_indices
boo <- popcycle::read_refraction.csv
boo <- popcycle::read_refraction_csv
head(boo)
boo <- popcycle::read_refraction_csv()
head(bo)
head(boo)
get_clean_stat_table
1.35/1.34
library(tidyverse)library(suncalc)library(viridis)library(knitr)library(broom)library(rain)renv::activate("~/Desktop/renvtest/popcycle/")library(popcycle)#################### LOAD DATA ####################save_path <- '~/Documents/SeaFlow/HOT/'file_name <- paste0(save_path, 'Data/SeaFlow_dataset_v1.5.xlsx') # From Zenodo (10.5281/zenodo.7154076)all_SF <- readxl::read_xlsx(file_name)lat <- 22.75; lon <- -158 # Station ALOHA locationaloha <- dplyr::filter(all_SF, lat >= 22.25 & lat <= 23.25 & lon <= -157.5 & lon >= -158.5)rm(all_SF)  # clear some memoryaloha$time <- as.POSIXct(aloha$time, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")aloha <- dplyr::filter(aloha, time < as.POSIXct("2021-02-01", tz = "UTC"))
abundance <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("abundance_"),    names_to = "pop",    names_prefix = "abundance_",    values_to = "abundance",    values_drop_na = FALSE  ) %>%  dplyr::select(time, lat, lon, cruise, pop, abundance)aloha$diam_croco <- as.numeric(aloha$diam_croco)diam <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("diam_"),    names_to = "pop",    names_prefix = "diam_",    values_to = "diam",    values_drop_na = FALSE  ) %>%  dplyr::select(time, lat, lon, cruise, pop, diam)aloha$Qc_croco <- as.numeric(aloha$Qc_croco)Qc <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("Qc_"),    names_to = "pop",    names_prefix = "Qc_",    values_to = "Qc",    values_drop_na = FALSE  ) %>%  dplyr::select(time, lat, lon, cruise, pop, Qc)biomass <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("biomass_"),    names_to = "pop",    names_prefix = "biomass_",    values_to = "biomass",    values_drop_na = FALSE  ) %>%  dplyr::sele
ct(time, lat, lon, cruise, pop, biomass)df_list <- list(abundance, diam, Qc, biomass)aloha_long <- df_list %>% purrr::reduce(full_join, by = c("time", "lat", "lon", "cruise", "pop"))# Specific language:  use euk instead of picoeukaloha_long$pop <- as.factor(gsub('picoeuk', 'euk', aloha_long$pop))group.colors <- c(prochloro = viridis::viridis(4)[1],                  synecho = viridis::viridis(4)[2], euk = viridis::viridis(4)[3],                  croco = viridis::viridis(4)[4])aloha_long$pop <- factor(aloha_long$pop, levels = names(group.colors))date_HST <- format(aloha_long$time, format = "%Y-%m-%d %H:%M:%S", tz = 'HST')aloha_long$local_time <- as.POSIXct(date_HST, tz = "HST")sun <- suncalc::getSunlightTimes(date = as.Date(aloha_long$local_time, tz = "HST"), lat = lat, lon = lon, keep = c('sunrise', 'sunset'), tz = "HST")aloha_long$sunrise <- sun$sunrisealoha_long$sunset <- sun$sunsetaloha_long$light <- "night"ind_day <- which(aloha_long$local_time < aloha_long$sunset & aloha_long$local_ti
me > aloha_long$sunrise)aloha_long$light[ind_day] <- "day"aloha_long$date <- lubridate::as_date(aloha_long$local_time)aloha_long$pop <- factor(aloha_long$pop, levels = names(group.colors))
ALOHA_48 <- aloha_long %>%    dplyr::group_by(cruise) %>%    dplyr::mutate(duration = as.numeric(difftime(dplyr::last(local_time), dplyr::first(local_time), units = 'hours'))) %>%    dplyr::filter(duration >= 48 & !cruise %in% c('KOK1606', 'MGL1704', 'KM1906')) # Exclude there-and-back-again cruises that seem longhour_list <- format(lubridate::floor_date(ALOHA_48$local_time, unit="hour"), "%Y-%m-%dT%H")time <- as.POSIXct(hour_list, format = "%Y-%m-%dT%H", tz = "HST")ALOHA_48$local_hour <- lubridate::hour(ALOHA_48$local_time)ALOHA_48$local_datehour <- timeALOHA_48_hr <- ALOHA_48 %>%    group_by(local_datehour, pop, cruise) %>%    summarize_all(funs(mean), na.rm = TRUE)cruise_list <- unique(ALOHA_48_hr$cruise)
trouble <- subset(ALOHA_48_hr, cruise == "KM2010")
trouble
g1 <- ggplot(trouble) +
geom_point(aes(x = time, y = abundance, fill = pop))
group.colors <- c(prochloro = viridis::viridis(4)[1],#
                  synecho = viridis::viridis(4)[2], euk = viridis::viridis(4)[3],#
                  croco = viridis::viridis(4)[4])#
trouble$pop <- factor(trouble$pop, levels = names(group.colors))
g1 <- ggplot(trouble) + geom_point(aes(x = time, y = abundance, fill = pop), pch = 21, size = 3, alpha = 0.5) + scale_fill_manual(values = group.colors) + theme_bw() + facet_wrap(~.pop)
print(g1)
g1 <- ggplot(trouble) + geom_point(aes(x = time, y = abundance, fill = pop), pch = 21, size = 3, alpha = 0.5) + scale_fill_manual(values = group.colors) + theme_bw() + facet_wrap(pop)
g1 <- ggplot(trouble) + geom_point(aes(x = time, y = abundance, fill = pop), pch = 21, size = 3, alpha = 0.5) + scale_fill_manual(values = group.colors) + theme_bw() + facet_wrap(~pop)
print(g1)
g1 <- ggplot(trouble) + geom_point(aes(x = time, y = abundance, fill = pop), pch = 21, size = 3, alpha = 0.5) + scale_fill_manual(values = group.colors) + theme_bw() + facet_wrap(~pop, ncol = 1, scales = "free_y")
print(g1)
g2 <- ggplot(trouble) + geom_point(aes(x = time, y = Qc, fill = pop), pch = 21, size = 3, alpha = 0.5) + scale_fill_manual(values = group.colors) + theme_bw() + facet_wrap(~pop, ncol = 1, scales = "free_y")
print(g2)
grid.arrange(g1, g2)
library(gridExtra)
grid.arrange(g1, g2)
grid.arrange(g1, g2, ncol = 2)
grid.arrange(g1, g2, ncol = 2, top = textGrob("KM2010"))
grid.arrange(g1, g2, ncol = 2, top = "KM2010")
png(print0(save_path, "KM2010_RAIN_series.png"), width = 2000, height = 1500, res = 300)
png(paste0(save_path, "KM2010_RAIN_series.png"), width = 2000, height = 1500, res = 300)
grid.arrange(g1, g2, ncol = 2, top = "KM2010")
dev.off()
png(paste0(save_path, "KM2010_RAIN_series.png"), width = 3000, height = 2000, res = 300)
grid.arrange(g1, g2, ncol = 2, top = "KM2010")
dev.off()
library(tidyverse)library(suncalc)library(viridis)library(knitr)library(broom)library(rain)renv::activate("~/Desktop/renvtest/popcycle/")library(popcycle)#################### LOAD DATA ####################save_path <- '~/Documents/SeaFlow/HOT/'file_name <- paste0(save_path, 'Data/SeaFlow_dataset_v1.5.xlsx') # From Zenodo (10.5281/zenodo.7154076)all_SF <- readxl::read_xlsx(file_name)lat <- 22.75; lon <- -158 # Station ALOHA locationaloha <- dplyr::filter(all_SF, lat >= 22.25 & lat <= 23.25 & lon <= -157.5 & lon >= -158.5)rm(all_SF)  # clear some memoryaloha$time <- as.POSIXct(aloha$time, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")aloha <- dplyr::filter(aloha, time < as.POSIXct("2021-02-01", tz = "UTC"))# Convert from short to long format for easier plottingabundance <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("abundance_"),    names_to = "pop",    names_prefix = "abundance_",    values_to = "abundance",    values_drop_na = FALSE  ) %>%  dplyr::select(time, lat, lon,
cruise, pop, abundance)aloha$diam_croco <- as.numeric(aloha$diam_croco)diam <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("diam_"),    names_to = "pop",    names_prefix = "diam_",    values_to = "diam",    values_drop_na = FALSE  ) %>%  dplyr::select(time, lat, lon, cruise, pop, diam)aloha$Qc_croco <- as.numeric(aloha$Qc_croco)Qc <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("Qc_"),    names_to = "pop",    names_prefix = "Qc_",    values_to = "Qc",    values_drop_na = FALSE  ) %>%  dplyr::select(time, lat, lon, cruise, pop, Qc)biomass <- aloha %>%  tidyr::pivot_longer(    cols = starts_with("biomass_"),    names_to = "pop",    names_prefix = "biomass_",    values_to = "biomass",    values_drop_na = FALSE  ) %>%  dplyr::select(time, lat, lon, cruise, pop, biomass)df_list <- list(abundance, diam, Qc, biomass)aloha_long <- df_list %>% purrr::reduce(full_join, by = c("time", "lat", "lon", "cruise", "pop"))# Specific language:  use euk instead of picoeu
kaloha_long$pop <- as.factor(gsub('picoeuk', 'euk', aloha_long$pop))group.colors <- c(prochloro = viridis::viridis(4)[1],                  synecho = viridis::viridis(4)[2], euk = viridis::viridis(4)[3],                  croco = viridis::viridis(4)[4])aloha_long$pop <- factor(aloha_long$pop, levels = names(group.colors))date_HST <- format(aloha_long$time, format = "%Y-%m-%d %H:%M:%S", tz = 'HST')aloha_long$local_time <- as.POSIXct(date_HST, tz = "HST")sun <- suncalc::getSunlightTimes(date = as.Date(aloha_long$local_time, tz = "HST"), lat = lat, lon = lon, keep = c('sunrise', 'sunset'), tz = "HST")aloha_long$sunrise <- sun$sunrisealoha_long$sunset <- sun$sunsetaloha_long$light <- "night"ind_day <- which(aloha_long$local_time < aloha_long$sunset & aloha_long$local_time > aloha_long$sunrise)aloha_long$light[ind_day] <- "day"aloha_long$date <- lubridate::as_date(aloha_long$local_time)aloha_long$pop <- factor(aloha_long$pop, levels = names(group.colors))#################################### NO
NPARAMETRIC RHYTHMICITY ##################################### Use only cruises that have at least 48 hours worth of data in order to resolve a 24-hr period.ALOHA_48 <- aloha_long %>%    dplyr::group_by(cruise) %>%    dplyr::mutate(duration = as.numeric(difftime(dplyr::last(local_time), dplyr::first(local_time), units = 'hours'))) %>%    dplyr::filter(duration >= 48 & !cruise %in% c('KOK1606', 'MGL1704', 'KM1906')) # Exclude there-and-back-again cruises that seem longhour_list <- format(lubridate::floor_date(ALOHA_48$local_time, unit="hour"), "%Y-%m-%dT%H")time <- as.POSIXct(hour_list, format = "%Y-%m-%dT%H", tz = "HST")ALOHA_48$local_hour <- lubridate::hour(ALOHA_48$local_time)ALOHA_48$local_datehour <- timeALOHA_48_hr <- ALOHA_48 %>%    group_by(local_datehour, pop, cruise) %>%    summarize_all(funs(mean), na.rm = TRUE)cruise_list <- unique(ALOHA_48_hr$cruise)param_list <- c('abundance', 'Qc')phyto_list <- unique(ALOHA_48_hr$pop)
cruise_list
library(tidyverse)#
library(grid)#
library(gridExtra)#
library(gtable)#
library(suncalc)#
library(googlesheets4)#
library(viridis)#
library(latex2exp)#
library(readxl)#
library(ggpubr)#
library(lubridate)#
library(marmap)#
library(oce)#
library(knitr)#
library(broom)#
library(ggh4x)#
library(grDevices)#
renv::activate("~/Desktop/renvtest/popcycle/")#
library(popcycle)#
#
##################
### LOAD DATA ####
##################
#
save_path <- '~/Documents/SeaFlow/HOT/'#
file_name <- paste0(save_path, 'Data/SeaFlow_dataset_v1.5.xlsx') # From Zenodo (10.5281/zenodo.7154076)#
all_SF <- readxl::read_xlsx(file_name)#
lat <- 22.75; lon <- -158 # Station ALOHA location#
aloha <- dplyr::filter(all_SF, lat >= 22.25 & lat <= 23.25 & lon <= -157.5 & lon >= -158.5)#
rm(all_SF)  # clear some memory#
#
aloha$time <- as.POSIXct(aloha$time, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")#
aloha <- dplyr::filter(aloha, time < as.POSIXct("2021-02-01", tz = "UTC"))#
#
# Convert from short to long format for easier plotting#
abundance <- aloha %>%#
  tidyr::pivot_longer(#
    cols = starts_with("abundance_"),#
    names_to = "pop",#
    names_prefix = "abundance_",#
    values_to = "abundance",#
    values_drop_na = FALSE#
  ) %>%#
  dplyr::select(time, lat, lon, cruise, pop, abundance)#
#
aloha$diam_croco <- as.numeric(aloha$diam_croco)#
diam <- aloha %>%#
  tidyr::pivot_longer(#
    cols = starts_with("diam_"),#
    names_to = "pop",#
    names_prefix = "diam_",#
    values_to = "diam",#
    values_drop_na = FALSE#
  ) %>%#
  dplyr::select(time, lat, lon, cruise, pop, diam)#
#
aloha$Qc_croco <- as.numeric(aloha$Qc_croco)#
Qc <- aloha %>%#
  tidyr::pivot_longer(#
    cols = starts_with("Qc_"),#
    names_to = "pop",#
    names_prefix = "Qc_",#
    values_to = "Qc",#
    values_drop_na = FALSE#
  ) %>%#
  dplyr::select(time, lat, lon, cruise, pop, Qc)#
#
biomass <- aloha %>%#
  tidyr::pivot_longer(#
    cols = starts_with("biomass_"),#
    names_to = "pop",#
    names_prefix = "biomass_",#
    values_to = "biomass",#
    values_drop_na = FALSE#
  ) %>%#
  dplyr::select(time, lat, lon, cruise, pop, biomass)#
#
df_list <- list(abundance, diam, Qc, biomass)#
aloha_long <- df_list %>% purrr::reduce(full_join, by = c("time", "lat", "lon", "cruise", "pop"))#
#
# Specific language:  use euk instead of picoeuk#
aloha_long$pop <- as.factor(gsub('picoeuk', 'euk', aloha_long$pop))#
group.colors <- c(prochloro = viridis::viridis(4)[1],#
                  synecho = viridis::viridis(4)[2], euk = viridis::viridis(4)[3],#
                  croco = viridis::viridis(4)[4])#
aloha_long$pop <- factor(aloha_long$pop, levels = names(group.colors))#
#
date_HST <- format(aloha_long$time, format = "%Y-%m-%d %H:%M:%S", tz = 'HST')#
aloha_long$local_time <- as.POSIXct(date_HST, tz = "HST")#
#
aloha_long$year <- as.factor(lubridate::year(aloha_long$local_time))#
aloha_long$month <- as.factor(lubridate::month(aloha_long$local_time))#
aloha_long$hour <- as.factor(lubridate::hour(aloha_long$local_time))#
#
mo_list <- c('KM1709', 'KM2011')    # Split double cruises by bumping late month cruises to the next month#
ind_mo <- which(aloha_long$cruise %in% mo_list)#
aloha_long$month[ind_mo] <- as.factor(as.numeric(as.character(aloha_long$month[ind_mo])) + 1)#
aloha_long$day <- as.factor(lubridate::yday(aloha_long$local_time))
ALOHA_in <- aloha_long[, c("time", "year", "month", "day", "hour", "cruise", "pop", 'abundance')]#
#
abund_hr <- ALOHA_in %>%#
  dplyr::group_by(year, day, hour, pop, cruise) %>%#
  dplyr::summarize(abund_SF = mean(abundance, na.rm = TRUE))#
#
influx_db$day <- lubridate::yday(influx_db$time)#
influx_db$hour <- lubridate::hour(influx_db$time)#
#abund_hot$hour <- 12  # Calibration is based on 12:00 GMT (02:00 HST)#
#
AvA <- merge(influx_db, abund_hr)#
AvA$pop <- factor(AvA$pop, levels = c('prochloro', 'synecho', 'euk')) #get the order I want#
droplevels(AvA) # drop croco#
#
influx.colors <- c(prochloro = viridis::viridis(4)[1],#
                  synecho = viridis::viridis(4)[2], euk = viridis::viridis(4)[3])   # No croco
ALOHA_in <- aloha_long[, c("time", "year", "month", "day", "hour", "cruise", "pop", 'abundance')]#
#
abund_hr <- ALOHA_in %>%#
  dplyr::group_by(year, day, hour, pop, cruise) %>%#
  dplyr::summarize(abund_SF = mean(abundance, na.rm = TRUE))
influx.colors <- c(prochloro = viridis::viridis(4)[1],#
                  synecho = viridis::viridis(4)[2], euk = viridis::viridis(4)[3])   # No croco
bloom <- inclusive %>%#
    group_by(Program, pop) %>%#
    mutate(abund_mean = mean(abundance, na.rm = TRUE), abund_sd = sd(abundance, na.rm = TRUE))
### INFLUX ####
influx <- read.csv(paste0(save_path, "Data/HOT_influx.csv"), skip = 5, header = F)  # Data from HOT-DOGS#
in_head <- read.csv(paste0(save_path, "Data/HOT_influx.csv"), skip = 2, nrows = 1)#
colnames(influx) <- colnames(in_head)#
influx[influx == -9] <- NA # Flagged values#
in_date <- stringr::str_pad(influx$date, 6, side = "left", pad = 0)#
in_time <- stringr::str_pad(influx$time, 6, side = "left", pad = 0)#
t_influx <- as.POSIXct(paste0(in_date, ' ', in_time), format = '%m%d%y %H%M%S', tz = 'UTC')#
influx$DateTime <- t_influx#
#
# Convert abundances from 10E5 cells/mL to cells/uL#
influx$peuk <- as.numeric(as.character(influx$ebact))*(100)#
influx$peuk[which(influx$peuk < -1)] <- NA#
influx$syn <- as.numeric(as.character(influx$sbact))*(100)#
influx$syn[which(influx$syn < -1)] <- NA#
influx$pro <- as.numeric(as.character(influx$pbact))*(100)#
influx$pro[which(influx$pro < -1)] <- NA#
#
post_influx <- influx[, c('DateTime', 'pro', 'syn', 'peuk')]
influx_db <- NULL#
for (i in seq(1, nrow(post_influx))){#
    pro <- data.frame(time = post_influx$DateTime[i], abundance = post_influx$pro[i], pop = 'prochloro')#
    syn <- data.frame(time = post_influx$DateTime[i], abundance = post_influx$syn[i], pop = 'synecho')#
    pico <- data.frame(time = post_influx$DateTime[i], abundance = post_influx$peuk[i], pop = 'euk')#
    influx_db <- rbind(influx_db, pro, syn, pico)#
}#
#
influx_db$month <- lubridate::month(influx_db$time)#
influx_db$year <- lubridate::year(influx_db$time)#
#
# Split double cruises by bumping late month cruises to the next month for KM2011/HOT323#
mo_list_date <- c(as.POSIXct("2020-09-26 13:19:36", tz = "UTC"))    #
ind_mo <- which(influx_db$time %in% mo_list_date)#
influx_db$month[ind_mo] <- influx_db$month[ind_mo] + 1#
#
influx_db$Amin <- NA # Blank variable for error bars#
influx_db$Amax <- NA#
influx_db$pop <- factor(influx_db$pop, levels = c('prochloro', 'synecho', 'euk', 'croco'))#
influx_db$Program <- "HOT"#
#
### SeaFlow daily means ####
ALOHA_in <- aloha_long[, c("time", "lat", "lon", "cruise", "pop", 'abundance', 'diam', 'Qc', 'biomass', 'local_time', 'year', 'month', 'day')]#
all_ALOHA_day <- ALOHA_in %>%#
        group_by(day, month, year, pop) %>%#
        select(!cruise) %>%#
        summarise(across(everything(), .f = list(mean = mean, sd = sd), na.rm = TRUE))#
#
all_ALOHA_day$Amin <- all_ALOHA_day$abundance_mean - all_ALOHA_day$abundance_sd # values for error bars#
all_ALOHA_day$Amax <- all_ALOHA_day$abundance_mean + all_ALOHA_day$abundance_sd # values for error bars#
all_ALOHA_day$year <- as.numeric(as.character(all_ALOHA_day$year))#
all_ALOHA_day$month <- as.numeric(as.character(all_ALOHA_day$month))#
#
SF_day <- as.data.frame(all_ALOHA_day[, c('abundance_mean', 'Amin', 'Amax', 'pop', 'month', 'year')])#
SF_day$Program <- 'SeaFlow'#
SF_day$abundance <- SF_day$abundance_mean
col_seaflow <- viridis::viridis(9)[5]#
col_HOT <- '#FFFFFFFF'#
#
prog.colors <- c(SeaFlow =  viridis::viridis(9)[5], HOT = '#FFFFFFFF')#
#
SF_day <- SF_day[, c('abundance', 'Amin', 'Amax', 'pop', 'month', 'year', 'Program')]#
all_HOT <- influx_db[, c('abundance', 'Amin', 'Amax', 'pop', 'month', 'year', 'Program')]#
all_day <- rbind(SF_day, all_HOT)#
all_day$Program <- as.factor(all_day$Program)
all_day$mo_yr <- paste0(month.abb[all_day$month], ' ', all_day$year)#
SF_moyr <- unique(all_day$mo_yr[which(as.character(all_day$Program) == 'SeaFlow')])   # List of month-year pairs with SeaFlow data#
inclusive <- all_day[which(all_day$mo_yr %in% SF_moyr), ]         # Allow only HOT data with SeaFlow counterpart
bloom <- inclusive %>%#
    group_by(Program, pop) %>%#
    mutate(abund_mean = mean(abundance, na.rm = TRUE), abund_sd = sd(abundance, na.rm = TRUE))#
#
bloom_sf <- subset(bloom, Program == "SeaFlow")#
bloom_sf$plus_2sd <- bloom_sf$abund_mean + 2*bloom_sf$abund_sd#
#
g <- ggplot2::ggplot(bloom, aes(x = year, y = abundance, fill = Program)) +#
    ggplot2::geom_linerange(ggplot2::aes(x = year, ymin = Amin, ymax = Amax), color = col_seaflow) +#
    ggplot2::geom_point(pch = 21, size = 3) +#
    ggplot2::geom_hline(data = bloom_sf, aes(yintercept = abund_mean, linetype = "Mean"), color = 'black') +#
    ggplot2::geom_hline(data = bloom_sf, aes(yintercept = plus_2sd, linetype = '2.0 sd'), color = 'firebrick3') +#
    scale_linetype_manual(name = "Mean + 2 sd", values = c(1, 2),#
        guide = guide_legend(override.aes = list(color = c("firebrick3", "black")))) +#
    ggplot2::facet_grid(rows = vars(pop), cols = vars(month), scales = 'free_y') +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::scale_fill_manual(values = prog.colors) +#
    ggplot2::labs(y = unname(latex2exp::TeX('Abundance (10$^6$ cells L$^{-1}$)')), x = 'Year', title = 'Define blooms by abundance standard deviation')#
#
fig_name <- paste0(save_path, "HOT_abundance_bloom_sd.pdf")#
pdf(fig_name, width = 15, height = 8)#
    print(g)#
dev.off()
summary(bloom)
bloom_sf
bloom_sf$plus_2sd
g <- ggplot(aloha, aes(x = abundance_picoeuk, y = lat)) +#
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = 22.25, ymax = 23.25, fill = "green", alpha = 0.25) +#
 # geom_hline(yintercept = 22.75, color = "green") +#
  geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_vline(xintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9) +#
  scale_fill_viridis_c() + #
  theme_bw()
print(g)
library(readxl)#
file_name <- paste0(save_path, 'Data/SeaFlow_dataset_v1.5.xlsx')#
all_SF <- readxl::read_xlsx(file_name)#
aloha <- dplyr::filter(all_SF, lat >= 20 & lat <= 26 & lon < -157 & lon > -159)#
aloha$time <- as.POSIXct(aloha$time, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")#
aloha <- dplyr::filter(aloha, time < as.POSIXct("2021-02-01", tz = "UTC"))#
rm(all_SF)
g <- ggplot(aloha, aes(x = abundance_picoeuk, y = lat)) +#
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = 22.25, ymax = 23.25, fill = "green", alpha = 0.25) +#
 # geom_hline(yintercept = 22.75, color = "green") +#
  geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_vline(xintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9) +#
  scale_fill_viridis_c() + #
  theme_bw()
print(g)
summary(aloha)
g <- ggplot(aloha, aes(x = time, y = abundance_picoeuk)) +#
	geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_hline(yintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9) +#
  scale_fill_viridis_c() + #
  theme_bw()
print(g)
g <- ggplot(aloha, aes(x = time, y = abundance_picoeuk)) +#
	geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_hline(yintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9, scales = "free_x") +#
  scale_fill_viridis_c() + #
  theme_bw()
print(g)
g <- ggplot(aloha, aes(x = time, y = abundance_picoeuk)) +#
	geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_hline(yintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9, scales = "free_x") +#
  scale_fill_viridis_c() + #
  axis.text.x=element_blank() +#
  theme_bw()
g <- ggplot(aloha, aes(x = time, y = abundance_picoeuk)) +#
	geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_hline(yintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9, scales = "free_x") +#
  scale_fill_viridis_c() + #
  axis.text.x = element_blank() +#
  theme_bw()
g <- ggplot(aloha, aes(x = time, y = abundance_picoeuk)) +#
	geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_hline(yintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9, scales = "free_x") +#
  scale_fill_viridis_c() + #
  theme(axis.text.x = element_blank()) +#
  theme_bw()
print(g)
g <- ggplot(aloha, aes(x = time, y = abundance_picoeuk)) +#
	geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_hline(yintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9, scales = "free_x") +#
  scale_fill_viridis_c() + #
  theme(axis.ticks.x = element_blank()) +#
  theme_bw()
print(g)
file_name <- paste0(save_path, 'picoeuk/pico_bloom_extent_time.png')#
png(file_name, width = 8000, height = 4000, res = 300)#
  print(g)#
dev.off()
g <- ggplot(aloha, aes(x = abundance_picoeuk, y = lat)) +#
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = 22.25, ymax = 23.25, fill = "green", alpha = 0.25) +#
 # geom_hline(yintercept = 22.75, color = "green") +#
  geom_bin2d(bins = 100, show.legend = FALSE) + #
  geom_vline(xintercept = 4.2735, color = "red") + # mean + 2 sd #
  facet_wrap(~cruise, ncol = 9) +#
  scale_fill_viridis_c() + #
  theme_bw()#
#
file_name <- paste0(save_path, 'picoeuk/pico_bloom_extent.png')#
png(file_name, width = 6000, height = 4000, res = 300)#
  print(g)#
dev.off()
library(tidyverse)
library(grid)
library(gridExtra)#
library(gtable)#
library(suncalc)#
library(googlesheets4)#
library(viridis)#
library(latex2exp)#
library(readxl)#
library(ggpubr)#
library(lubridate)#
library(marmap)#
library(oce)#
library(knitr)#
library(broom)#
library(ggh4x)#
library(grDevices)
q()
help(package = ggh4x)
library(tidyverse)
library(grid)
library(gridExtra)
help(package = gtable)
library(suncalc)
library(viridis)
library(latex2exp)
library(readxl)
library(marmap)
library(oce)
library(broom)
library(grDevices)
renv::activate("~/Desktop/renvtest/popcycle/")
library(popcycle)
setwd("~/SeaFlow/Forks/SeaFlow_ALOHA/R")
url <- "https://zenodo.org/record/7154076/files/SeaFlow_dataset_v1.5.xlsx"
file_name <- tempfile()
try(download.file(url,file_name,method="curl"))
if (is.na(file.size(file_name))) download.file(url, file_name,method="auto")
all_SF <- readxl::read_xlsx(file_name) %>%
mutate(time = as.POSIXct(time, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")) %>%#
  mutate(diam_croco = as.numeric(diam_croco),#
         Qc_croco = as.numeric(Qc_croco))
lat <- 22.75; lon <- -158 #
aloha <- all_SF %>% dplyr::filter(lat >= 22.25 & lat <= 23.25 & lon <= -157.5 & lon >= -158.5) %>%#
  dplyr::filter(time < as.POSIXct("2021-02-01", tz = "UTC"))#
rm(all_SF)  # clear some memory
aloha_long <- aloha %>% #
	tidyr::pivot_longer(cols = -c(time, lat, lon, depth, cruise), #
		names_to = c('.value','pop'), names_sep = "_") %>%#
	arrange(time)
group.colors <- c(prochloro = viridis::viridis(4)[1],#
                  synecho = viridis::viridis(4)[2], #
                  euk = viridis::viridis(4)[3],#
                  croco = viridis::viridis(4)[4])
aloha_long <- aloha_long %>% #
	mutate(pop = case_when(pop == 'picoeuk' ~ 'euk', TRUE ~ pop),#
		pop = factor(pop, levels = names(group.colors)), Program = "SeaFlow")
aloha_long <- aloha_long %>% #
	mutate(local_time = lubridate::with_tz(time, tzone = 'HST'),#
		year = lubridate::year(local_time),#
        month = lubridate::month(local_time),#
        yday = lubridate::yday(local_time),#
        hour = lubridate::hour(local_time))
aloha_long <- aloha_long %>% #
	mutate(month = case_when(cruise == "KM1709" ~ month + 1,#
		cruise == "KM2011" ~ month + 1, TRUE ~ month))
summary(aloha_long)
aloha_long_mean <- aloha_long %>%#
  select(!c(cruise, depth)) %>%#
  group_by(Program, pop, year, yday, month) %>%#
  summarise_all(list(mean = mean, sd = sd), na.rm = TRUE) %>%#
  rename(abundance = abundance_mean,#
         DateTime = time_mean) %>%#
  mutate(date = paste(year, month))
influx_file <- '../Data/HOT_influx.csv' # Data from HOT-DOGS
influx_file
file.exists(influx_file)
influx <- read_csv(influx_file, skip = 2, col_types = cols("c","c","c","d","d","d","d","c"))[-1,-c(8)]     # abundances are in 10E5 cells/mL
head(influx)
influx <- influx %>% mutate(DateTime = strptime(paste(date,time), format = "%m%d%y %H%M%S", tz = 'HST'),#
                            year = lubridate::year(DateTime),#
                            month = lubridate::month(DateTime),#
                            yday = lubridate::yday(DateTime),#
                            hour = lubridate::hour(DateTime),#
                            date = paste(year, month))
post_influx <- influx %>% #
	mutate(pbact = case_when(pbact < 0 ~ NA, TRUE ~ pbact * 100),#
		sbact = case_when(sbact < 0 ~ NA, TRUE ~ sbact * 100),#
    	ebact = case_when(ebact < 0 ~ NA, TRUE ~ ebact * 100)) %>%#
    rename(prochloro = pbact,#
         synecho = sbact,#
         euk = ebact)
influx_keep <- post_influx %>% filter(DateTime > lubridate::as_date('2014-12-01'))
influx_long <- influx_keep %>% #
	tidyr::pivot_longer(cols = c(prochloro, synecho, euk), #
		names_to = "pop", values_to = "abundance") %>%#
	mutate(pop = factor(pop, levels = names(group.colors)),#
         abundance_sd = NA,#
         Program = "HOT")
summary(influx_long)
influx_long <- influx_long[influx_long$date %in% unique(aloha_long_mean$date),]
all_day <- bind_rows(influx_long %>% select(Program, DateTime, year, month, yday, pop, abundance, abundance_sd), #
	aloha_long_mean %>% select(Program, DateTime, year, month, yday, pop, abundance, abundance_sd)) %>%#
  mutate(Program = factor(Program, levels = c("SeaFlow", "HOT")))
summary(all_day)
prog.colors <- c(SeaFlow =  viridis::viridis(9)[5], HOT = '#FFFFFFFF')
g <- all_day %>% #
  arrange(Program) %>%#
  ggplot2::ggplot(aes(x = year, y = abundance, fill = Program)) +#
  ggplot2::geom_linerange(aes(ymin = abundance - abundance_sd, ymax =  abundance + abundance_sd)) +#
  ggplot2::geom_point(size = 3, pch = 21) +#
  ggplot2::facet_grid(pop ~ month, scales = 'free_y') +#
  ggplot2::theme_bw(base_size = 18) +#
  ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
  ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
  ggplot2::scale_fill_manual(values = prog.colors) +#
  ggplot2::labs(y = unname(latex2exp::TeX('Abundance (10$^6$ cells L$^{-1}$)')), x = 'Year')
prog.colors <- c(SeaFlow =  viridis::viridis(9)[5], HOT = '#FFFFFFFF')#
#
g <- all_day %>% #
  arrange(Program) %>%#
  ggplot2::ggplot(aes(x = year, y = abundance, fill = Program)) +#
  ggplot2::geom_linerange(aes(ymin = abundance - abundance_sd, ymax =  abundance + abundance_sd)) +#
  ggplot2::geom_point(size = 3, pch = 21) +#
  ggplot2::facet_grid(pop ~ month, scales = 'free_y') +#
  ggplot2::theme_bw(base_size = 18) +#
  ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
  ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
  ggplot2::scale_fill_manual(values = prog.colors) +#
  ggplot2::labs(y = unname(latex2exp::TeX('Abundance (10$^6$ cells L$^{-1}$)')), x = 'Year')#
#
fig_name <- paste0("../Figures/HOT_abundance_daily_point_on_station_sd_SF.pdf")#
pdf(fig_name, width = 15, height = 8)#
print(g)#
dev.off()
all_day_p <- all_day %>%#
  pivot_wider(names_from = Program, values_from = c(abundance, abundance_sd), id_cols = c(year, yday, pop))
summary(all_day_p)
all_day_p <- dplyr::filter(all_day_p, pop != "croco")	# Influx doesn't enumerate Croco
summary(all_day_p)
all_day_p <- all_day %>%#
  pivot_wider(names_from = Program, values_from = c(abundance, abundance_sd), id_cols = c(year, yday, pop))
p <- list()#
lim <- c(350, 6, 8)#
i <- 1#
for (phyto in c("prochloro", "synecho", "euk")){#
  p[[i]] <- all_day_p %>%#
    filter(pop == phyto) %>%#
    ggplot(aes(abundance_HOT, abundance_SeaFlow)) + #
    geom_linerange(aes(ymin = abundance_SeaFlow - abundance_sd_SeaFlow, ymax =  abundance_SeaFlow + abundance_sd_SeaFlow)) +#
    geom_point(size = 3, pch = 21, fill = "white")+#
    geom_abline(slope = 1, intercept = 0, col = "red3", lty= 2) +#
    xlim(0, lim[i]) +#
    ylim(0, lim[i]) + #
    theme_bw(base_size = 18) +#
    labs(x = "", y = "", title = phyto)#
  i <- i + 1#
}
fig_name <- "../Figures/HOT_abundance_SF_vs_Influx.pdf"#
pdf(fig_name, width = 12, height = 4)#
fig <- gridExtra::grid.arrange(p[[1]], p[[2]], p[[3]],  #
                               nrow = 1,widths=c(2, 2, 2, 1),#
                               left =  text_grob(unname(latex2exp::TeX('SeaFlow Abundance (10$^6$ cells L$^{-1}$)')), rot = 90), #
                               bottom = text_grob(unname(latex2exp::TeX('Influx Abundance (10$^6$ cells L$^{-1}$)'))))#
dev.off()
?textGrob
fig_name <- "../Figures/HOT_abundance_SF_vs_Influx.pdf"#
pdf(fig_name, width = 12, height = 4)#
fig <- gridExtra::grid.arrange(p[[1]], p[[2]], p[[3]],  #
                               nrow = 1,widths=c(2, 2, 2, 1),#
                               left =  grid::textGrob(unname(latex2exp::TeX('SeaFlow Abundance (10$^6$ cells L$^{-1}$)')), rot = 90), #
                               bottom = grid::textGrob(unname(latex2exp::TeX('Influx Abundance (10$^6$ cells L$^{-1}$)'))))#
dev.off()
bloom <- all_day %>%#
    group_by(Program, pop) %>%#
    mutate(abund_mean = mean(abundance, na.rm = TRUE), abund_sd = sd(abundance, na.rm = TRUE))#
#
bloom_sf <- subset(bloom, Program == "SeaFlow")#
bloom_sf$plus_2sd <- bloom_sf$abund_mean + 2*bloom_sf$abund_sd#
#
g <- ggplot2::ggplot(bloom, aes(x = year, y = abundance, fill = Program)) +#
    ggplot2::geom_linerange(ggplot2::aes(x = year, ymin = abundance - abundance_sd, ymax = abundance + abundance_sd)) +#
    ggplot2::geom_point(pch = 21, size = 3) +#
    ggplot2::geom_hline(data = bloom_sf, aes(yintercept = abund_mean, linetype = "Mean"), color = 'black') +#
    ggplot2::geom_hline(data = bloom_sf, aes(yintercept = plus_2sd, linetype = '2.0 sd'), color = 'firebrick3') +#
    scale_linetype_manual(name = "Mean + 2 sd", values = c(1, 2),#
        guide = guide_legend(override.aes = list(color = c("firebrick3", "black")))) +#
    ggplot2::facet_grid(rows = vars(pop), cols = vars(month), scales = 'free_y') +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::scale_fill_manual(values = prog.colors) +#
    ggplot2::labs(y = unname(latex2exp::TeX('Abundance (10$^6$ cells L$^{-1}$)')), x = 'Year', title = 'Define blooms by abundance standard deviation')#
#
fig_name <- "../Figures/HOT_abundance_bloom_sd.pdf"#
pdf(fig_name, width = 15, height = 8)#
    print(g)#
dev.off()
midmonth <- as.Date(paste0(lubridate::year(aloha_long$local_time), '-', lubridate::month(aloha_long$local_time), '-15'), tz = 'HST')#
sun_mid <- suncalc::getSunlightTimes(date = midmonth, lat = lat, lon = lon, keep = c('sunrise', 'sunset'), tz = "HST")#
sunrise_mid <- lubridate::hour(sun_mid$sunrise) + lubridate::minute(sun_mid$sunrise)/60
all_aloha_hr <-  aloha_long %>%#
  mutate(suntime = local_time - (sunrise_mid * 3600),#
         sundate = lubridate::as_date(suntime),#
         sunhour = lubridate::hour(suntime)) %>%#
  dplyr::group_by(Program, cruise, pop, sunhour, sundate) %>%#
  dplyr::summarize_all(mean, na.rm = TRUE) %>%#
  mutate(date = lubridate::as_date(local_time)) %>%#
  arrange(time)
all_aloha_hr <- all_aloha_hr %>% #
	mutate(month = case_when(cruise == "KM1709" ~ month + 1, cruise == "KM2011" ~ month + 1, TRUE ~ month), #
		month = stringr::str_pad(month, 2, side = "left", pad = 0))
cruise_cut <- c('KOK1606', 'MGL1704', 'KM1906')   # These cruises pass through Station aloha so quickly, they are not helpful for diel patterns#
all_aloha_hr_no_outlier <- subset(all_aloha_hr, !(cruise %in% cruise_cut))#
#
ind_285 <- which(all_aloha_hr_no_outlier$cruise == "KOK1608" & all_aloha_hr_no_outlier$pop == "croco")  # Croco diameter is very strange and high during this cruise#
all_aloha_hr_no_outlier <- all_aloha_hr_no_outlier[-ind_285, ]#
all_aloha_hr_no_outlier$year <- as.factor(all_aloha_hr_no_outlier$year)
all_aloha_hr_robust <- subset(all_aloha_hr_no_outlier, abundance > 0.02) # 0.048 = About 30 cells per 3-min file
summary(all_aloha_hr_robust)
summary(sunrise_mid)
all_aloha_hr_robust <- all_aloha_hr_robust %>% #
  group_by(pop) %>%#
  mutate(n_days = length(unique(sundate)))#
#
# Draw with dual axes#
#
coef <- (0.261*((4*pi/3)^0.860))/(2^(3*0.860))  # relationship between Qc and diameter in Ribalet et al, 2019#
expo <- 3*0.860
med_diam <- all_aloha_hr_robust %>%#
    dplyr::group_by(pop) %>%#
    summarize(median = median(diam, na.rm = TRUE))#
#
g1 <- all_aloha_hr_robust %>%#
    ggplot(aes(x = sunhour, y = diam, group = sundate)) +#
    geom_rect(aes(xmin = 12, xmax = 24, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_line(alpha = 0.25, color = prog.colors['SeaFlow'], size = 2) +#
    theme_bw(base_size = 20) +#
    scale_y_continuous(sec.axis = sec_axis(~ coef*.^expo, labels = NULL)) +#
    facet_wrap(vars(pop), ncol = 1, scales = 'free_y') +#
    geom_text(aes(label = paste0(' n = ', n_days), x = -Inf, y = Inf), hjust = 0, vjust = 1.5, check_overlap = T, size = 6) +#
    ggplot2::labs(y = unname(latex2exp::TeX('Diameter ($\\mu$m)')), x = 'Hours since Dawn')#
#
g2 <- all_aloha_hr_robust %>%#
    ggplot(aes(y = diam, group = sundate)) +#
    geom_histogram(alpha = 0.5, fill = "grey30") +#
    geom_hline(data = med_diam, aes(yintercept = median)) +#
    theme_bw(base_size = 20) +#
    scale_y_continuous(labels = NULL, sec.axis = sec_axis(~ 1000*coef*.^expo, name = unname(latex2exp::TeX('Carbon Quota (fg C cell$^{-1}$)')))) +#
    ggplot2::theme(legend.position = 'none') +#
    facet_wrap(vars(pop), ncol = 1, scales = 'free_y') +#
    ggplot2::labs(x = 'No. hours', y = '')
gridExtra::grid.arrange(g1, g2, ncol = 2)
fig_name <- '../Figures/HOT_diameter_Qc_summary.pdf'#
pdf(fig_name, width = 8, height = 12)#
    gridExtra::grid.arrange(g1, g2, ncol = 2)#
dev.off()
rain_file1 <- '../Data/HOT_rain_results_2023_06_20.csv'  # peaks (relevant for Qc)#
big_rain_peak <- read.csv(rain_file1)#
rain_file2 <- '../Data/HOT_rain_results_2023_07_10_troughs.csv'   # troughs (relevant for abundance)#
big_rain_trough <- read.csv(rain_file2)
rain_file1 <- '../Data/HOT_rain_results_2023_06_20_peaks.csv'  # peaks (relevant for Qc)
big_rain_peak <- read.csv(rain_file1)
big_rain <- rbind(subset(big_rain_peak, param == 'Qc'), subset(big_rain_trough, param == 'abundance'))
t <- as.POSIXct(big_rain$first_peak, format = '%Y-%m-%d %H:%M:%S', tz = "HST")#
pk_hr <- lubridate::hour(t)#
big_rain$peak_hour <- pk_hr#
sig <- big_rain$pVal <= 0.05    # Significant p-values--are they periodic or not?#
big_rain$periodic <- sig#
big_rain$pop <- gsub("picoeuk", 'euk', big_rain$pop)#
big_rain$pop <- factor(big_rain$pop, levels = names(group.colors))
big_rain
g1 <- all_aloha_hr_robust %>%#
    ggplot(aes(x = sunhour, y = diam, group = sundate)) +#
    geom_rect(aes(xmin = 12, xmax = 24, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_line(alpha = 0.25, color = prog.colors['SeaFlow'], linewidth = 2) +#
    theme_bw(base_size = 20) +#
    scale_y_continuous(sec.axis = sec_axis(~ coef*.^expo, labels = NULL)) +#
    facet_wrap(vars(pop), ncol = 1, scales = 'free_y') +#
    geom_text(aes(label = paste0(' n = ', n_days), x = -Inf, y = Inf), hjust = 0, vjust = 1.5, check_overlap = T, size = 6) +#
    ggplot2::labs(y = unname(latex2exp::TeX('Diameter ($\\mu$m)')), x = 'Hours since Dawn')#
#
g2 <- all_aloha_hr_robust %>%#
    ggplot(aes(y = diam, group = sundate)) +#
    geom_histogram(alpha = 0.5, fill = "grey30") +#
    geom_hline(data = med_diam, aes(yintercept = median)) +#
    theme_bw(base_size = 20) +#
    scale_y_continuous(labels = NULL, sec.axis = sec_axis(~ 1000*coef*.^expo, name = unname(latex2exp::TeX('Carbon Quota (fg C cell$^{-1}$)')))) +#
    ggplot2::theme(legend.position = 'none') +#
    facet_wrap(vars(pop), ncol = 1, scales = 'free_y') +#
    ggplot2::labs(x = 'No. hours', y = '')#
#
fig_name <- '../Figures/HOT_diameter_Qc_summary.pdf'#
pdf(fig_name, width = 8, height = 12)#
    gridExtra::grid.arrange(g1, g2, ncol = 2)#
dev.off()
TOD_2 <- cut(big_rain$peak_hour, breaks = c(-0.5, 1.5, 3.5, 5.5, 7.5, 9.5, 11.5, 13.5, 15.5, 17.5, 19.5, 21.5, 23.5),#
    labels = c( '00:00 - 01:59', '02:00 - 03:59', '04:00 - 05:59', '06:00 - 07:59', '08:00 - 09:59', '10:00 - 11:59', '12:00 - 13:59', '14:00 - 15:59', '16:00 - 17:59', '18:00 - 19:59', '20:00 - 21:59', '22:00 - 23:59'))#
TOD_2 <- factor(TOD_2, levels = c('Aperiodic', '00:00 - 01:59', '02:00 - 03:59', '04:00 - 05:59', '06:00 - 07:59', '08:00 - 09:59', '10:00 - 11:59', '12:00 - 13:59', '14:00 - 15:59', '16:00 - 17:59', '18:00 - 19:59', '20:00 - 21:59', '22:00 - 23:59'))#
TOD_2[which(big_rain$periodic == FALSE)] <- 'Aperiodic'#
big_rain$TOD_2 <- TOD_2
rain_trough <- subset(big_rain, param == "abundance")#
n.cruise <- length(unique(rain_trough$cruise))#
#
count_trough <- rain_trough %>%#
    group_by(pop, TOD_2) %>%#
    summarise(n = n())
fig_name <- "../Figures/HOT_rain_abundance_bar_2hr_nocolor.pdf"#
pdf(fig_name, width = 8, height = 10)#
g <- ggplot2::ggplot(rain_trough, aes(TOD_2, fill = TOD_2)) +#
    geom_rect(aes(xmin = -Inf, xmax = 4.5, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_rect(aes(xmin = 11, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    ggplot2::geom_bar(aes(y = (..count..)/n.cruise), alpha = 1, colour = 'black', fill = 'white', show.legend = FALSE) +#
    ggplot2::theme_bw(base_size = 22) +#
    #ggplot2::scale_fill_manual(values = day_colors) +#
    ggplot2::scale_x_discrete(labels = c('NA', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')) +#
    ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) +#
    ggplot2::facet_wrap(vars(pop), ncol = 1) +#
    ggpubr::rotate_x_text() +#
    ggplot2::labs(x = 'Abundance Minima Hour (HST)', y = 'Percent of Cruises')#
print(g)#
dev.off()
g <- ggplot2::ggplot(rain_trough, aes(TOD_2, fill = TOD_2)) +#
    geom_rect(aes(xmin = -Inf, xmax = 4.5, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_rect(aes(xmin = 11, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    ggplot2::geom_bar(aes(y = (after_stat(count))/n.cruise), alpha = 1, colour = 'black', fill = 'white', show.legend = FALSE) +#
    ggplot2::theme_bw(base_size = 22) +#
    #ggplot2::scale_fill_manual(values = day_colors) +#
    ggplot2::scale_x_discrete(labels = c('NA', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')) +#
    ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) +#
    ggplot2::facet_wrap(vars(pop), ncol = 1) +#
    ggpubr::rotate_x_text() +#
    ggplot2::labs(x = 'Abundance Minima Hour (HST)', y = 'Percent of Cruises')
print(g)
fig_name <- "../Figures/HOT_rain_abundance_bar_2hr_nocolor.pdf"#
pdf(fig_name, width = 8, height = 10)#
g <- ggplot2::ggplot(rain_trough, aes(TOD_2, fill = TOD_2)) +#
    geom_rect(aes(xmin = -Inf, xmax = 4.5, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_rect(aes(xmin = 11, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    ggplot2::geom_bar(aes(y = (after_stat(count))/n.cruise), alpha = 1, colour = 'black', fill = 'white', show.legend = FALSE) +#
    ggplot2::theme_bw(base_size = 22) +#
    #ggplot2::scale_fill_manual(values = day_colors) +#
    ggplot2::scale_x_discrete(labels = c('NA', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')) +#
    ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) +#
    ggplot2::facet_wrap(vars(pop), ncol = 1) +#
    ggpubr::rotate_x_text() +#
    ggplot2::labs(x = 'Abundance Minima Hour (HST)', y = 'Percent of Cruises')#
print(g)#
dev.off()
rain_peak <- subset(big_rain, param == "Qc")#
n.cruise <- length(unique(rain_peak$cruise))
summary(rain_peak)
g <- ggplot2::ggplot(rain_trough, aes(TOD_2, fill = TOD_2)) +#
    geom_rect(aes(xmin = -Inf, xmax = 4.5, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_rect(aes(xmin = 11, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    ggplot2::geom_bar(aes(y = after_stat(count)/n.cruise), alpha = 1, colour = 'black', fill = 'white', show.legend = FALSE) +#
    ggplot2::theme_bw(base_size = 22) +#
    #ggplot2::scale_fill_manual(values = day_colors) +#
    ggplot2::scale_x_discrete(labels = c('NA', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')) +#
    ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) +#
    ggplot2::facet_wrap(vars(pop), ncol = 1) +#
    ggpubr::rotate_x_text() +#
    ggplot2::labs(x = 'Abundance Minima Hour (HST)', y = 'Percent of Cruises')#
print(g)
fig_name <- "../Figures/HOT_rain_abundance_bar_2hr_nocolor.pdf"#
pdf(fig_name, width = 8, height = 10)#
g <- ggplot2::ggplot(rain_trough, aes(TOD_2, fill = TOD_2)) +#
    geom_rect(aes(xmin = -Inf, xmax = 4.5, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_rect(aes(xmin = 11, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    ggplot2::geom_bar(aes(y = after_stat(count)/n.cruise), alpha = 1, colour = 'black', fill = 'white', show.legend = FALSE) +#
    ggplot2::theme_bw(base_size = 22) +#
    #ggplot2::scale_fill_manual(values = day_colors) +#
    ggplot2::scale_x_discrete(labels = c('NA', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23')) +#
    ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) +#
    ggplot2::facet_wrap(vars(pop), ncol = 1) +#
    ggpubr::rotate_x_text() +#
    ggplot2::labs(x = 'Abundance Minima Hour (HST)', y = 'Percent of Cruises')#
print(g)#
dev.off()
g <- ggplot2::ggplot(rain_peak, aes(TOD_2, fill = TOD_2)) +#
    geom_rect(aes(xmin = -Inf, xmax = 4.5, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_rect(aes(xmin = 11, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    ggplot2::geom_bar(aes(y = after_stat(count)/n.cruise), alpha = 1, colour = 'black', fill = 'white', show.legend = FALSE) +#
    ggplot2::theme_bw(base_size = 22) +#
    #ggplot2::scale_fill_manual(values = day_colors, name = "Time of Day (HST)", drop = FALSE) +#
    ggplot2::scale_x_discrete(labels = c('NA', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), drop = FALSE) +#
    ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) +#
    ggplot2::facet_wrap(vars(pop), ncol = 1) +#
    ggpubr::rotate_x_text() +#
    ggplot2::labs(x = 'Carbon Quota Maxima Hour (HST)', y = 'Percent of Cruises')#
print(g)
fig_name <- "../Figures/HOT_rain_Qc_bar_2hr_nocolor.pdf"#
pdf(fig_name, width = 8, height = 10)#
g <- ggplot2::ggplot(rain_peak, aes(TOD_2, fill = TOD_2)) +#
    geom_rect(aes(xmin = -Inf, xmax = 4.5, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    geom_rect(aes(xmin = 11, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "grey", color = 'grey') +#
    ggplot2::geom_bar(aes(y = after_stat(count)/n.cruise), alpha = 1, colour = 'black', fill = 'white', show.legend = FALSE) +#
    ggplot2::theme_bw(base_size = 22) +#
    #ggplot2::scale_fill_manual(values = day_colors, name = "Time of Day (HST)", drop = FALSE) +#
    ggplot2::scale_x_discrete(labels = c('NA', '1', '3', '5', '7', '9', '11', '13', '15', '17', '19', '21', '23'), drop = FALSE) +#
    ggplot2::scale_y_continuous(labels = scales::percent_format(accuracy = 1L)) +#
    ggplot2::facet_wrap(vars(pop), ncol = 1) +#
    ggpubr::rotate_x_text() +#
    ggplot2::labs(x = 'Carbon Quota Maxima Hour (HST)', y = 'Percent of Cruises')#
print(g)#
dev.off()
HOT_POC <- read.csv(paste0("../Data/HOT_PC_ATP.csv"), skip = 6, header = F)#
POC_head <- read.csv(paste0("../Data/HOT_PC_ATP.csv"), skip = 3, nrows = 1)#
colnames(HOT_POC) <- colnames(POC_head)
HOT_POC$cruise <- paste0('HOT', substr(as.character(HOT_POC$botid), 1, 3))#
HOT_POC[HOT_POC == -9] <- NA#
HOT_POC$date <- str_pad(HOT_POC$date, 6, side = "left", pad = 0)#
HOT_POC$time <- str_pad(HOT_POC$time, 6, side = "left", pad = 0)#
HOT_POC$date <- as.POSIXct(paste0(HOT_POC$date, " ", HOT_POC$time), format = "%m%d%y %H%M%S", tz = "UTC")#
#
HOT_POC$day <- lubridate::yday(HOT_POC$date)#
HOT_POC$year <- lubridate::year(HOT_POC$date)#
HOT_POC$month <- lubridate::month(HOT_POC$date) #
#
# Split double cruises by bumping late month cruises to the next month for KM2011/HOT323, HOT319 borders Jan and Feb#
mo_list_date <- c(as.POSIXct("2020-01-31 02:14:22", tz = "UTC"), as.POSIXct("2020-09-28 00:59:58", tz = "UTC"), as.POSIXct("2020-09-29 01:07:07", tz = "UTC"))    #
ind_mo <- which(HOT_POC$date %in% mo_list_date)#
HOT_POC$month[ind_mo] <- HOT_POC$month[ind_mo] + 1
HOT_Clive <- HOT_POC %>%  #
    dplyr::group_by(cruise) %>%#
    dplyr::summarize(PC = mean(pc, na.rm = TRUE), ATP = mean(atp, na.rm = TRUE), month = mean(month), year = mean(year))#
#
PC_only <- HOT_POC[!is.na(HOT_POC$pc), ]#
HOT_Clive <- merge(HOT_Clive, PC_only[, c("date", "cruise")])   # Carry the time stamp for PC#
#
# Estimate percentage live particulate carbon from ATP based on Henderikx-Freitas et al, 2021 and Christian & Karl, 1994.#
# Note that PC and ATP are taken on different days#
HOT_Clive$pc_live_250 <- (HOT_Clive$ATP*250/HOT_Clive$PC)/(12.01*10^3)  # percentage of live carbon and convert to g ATP/g C#
HOT_Clive$pc_live_400 <- HOT_Clive$ATP*400/HOT_Clive$PC/(12.01*10^3)#
HOT_Clive$pc_live_150 <- (HOT_Clive$ATP*150/HOT_Clive$PC)/(12.01*10^3) #
#
umolpkg2ugpL <- 12.01*1036/(10^3)   # Convert umol C/kg to ug C/L.#
HOT_Clive$C_live_150 <- HOT_Clive$PC*umolpkg2ugpL*HOT_Clive$pc_live_150#
HOT_Clive$C_live_250 <- HOT_Clive$PC*umolpkg2ugpL*HOT_Clive$pc_live_250#
HOT_Clive$C_live_400 <- HOT_Clive$PC*umolpkg2ugpL*HOT_Clive$pc_live_400#
HOT_Clive <- na.omit(HOT_Clive)#
#
# Compare per-cruise biomass estimates between methods#
all_aloha_cruise <- aloha_long %>%#
    group_by(pop, month, year) %>%#
    summarize(mean_biomass = mean(biomass, na.rm = TRUE))#
#
all_aloha_cruise$month <- as.numeric(as.character(all_aloha_cruise$month))#
all_aloha_cruise$year <- as.numeric(as.character(all_aloha_cruise$year))#
#
total_aloha_cruise <- all_aloha_cruise %>%#
    group_by(month, year) %>%#
    summarize(total_biomass = sum(mean_biomass, na.rm = TRUE))#
#
PC_all <- merge(HOT_Clive, total_aloha_cruise, by = c('month', 'year'))#
PC_all$SF2PC <- PC_all$total_biomass/PC_all$C_live_250#
PC_all$bloom <- FALSE#
ind_b1 <- which(PC_all$month == 7 & PC_all$year == 2016)	# Eukaryote blooms: July 2016, Aug 2016, Aug 2017, Aug 2019#
ind_b2 <- which(PC_all$month == 8 & PC_all$year == 2016)#
ind_b3 <- which(PC_all$month == 8 & PC_all$year == 2017)#
ind_b4 <- which(PC_all$month == 8 & PC_all$year == 2019)#
ind_bloom <- c(ind_b1, ind_b2, ind_b3, ind_b4)#
PC_all$bloom[ind_bloom] <- TRUE#
#
SF2PC <- PC_all %>%#
	dplyr::group_by(bloom) %>%#
	dplyr::summarize(SF2PC_mean = mean(SF2PC), SF2PC_sd = sd(SF2PC), SF2PC_min = min(SF2PC), SF2PC_max = max(SF2PC))
sun <- suncalc::getSunlightTimes(date = as.Date(all_aloha_hr_robust$local_time, tz = "HST"), lat = lat, lon = lon, keep = c('sunrise', 'sunset'), tz = "HST")#
all_aloha_hr_robust$sunrise <- sun$sunrise#
all_aloha_hr_robust$sunset <- sun$sunset#
#
all_aloha_hr_robust$light <- "night"#
ind_day <- which(all_aloha_hr_robust$local_time < all_aloha_hr_robust$sunset & all_aloha_hr_robust$local_time > all_aloha_hr_robust$sunrise)#
all_aloha_hr_robust$light[ind_day] <- "day"#
all_aloha_hr_robust$daylength <- as.numeric(difftime(all_aloha_hr_robust$sunset, all_aloha_hr_robust$sunrise, units = "hours"))#
all_aloha_light <- subset(as.data.frame(all_aloha_hr_robust), light == "day")#
all_aloha_light$hour <- as.numeric(lubridate::hour(all_aloha_light$local_time))    # Otherwise the linear model treats it as categorical#
#
Qc_mean <- all_aloha_light %>%#
    dplyr::group_by(date, pop) %>%#
    dplyr::summarize(Qc_mean = mean(Qc, na.rm = TRUE), data_day = last(sunhour) - first(sunhour), n = length(Qc))#, gap = diff(sunhour))
aloha_lm_day <- all_aloha_light %>%#
    dplyr::group_by(date, pop) %>%#
    tidyr::nest() %>%#
    dplyr::mutate(#
        #model = purrr::map(data, ~lm(Qc ~ hour, data = .)),#
        model = purrr::map(data, ~lm(log(Qc) ~ sunhour, data = .)),#
        tidied = purrr::map(model, broom::tidy)#
    ) %>%#
    tidyr::unnest(tidied)#
#
aloha_lm_day_df <- as.data.frame(aloha_lm_day[, c("pop", 'date', 'term', 'estimate', 'std.error', 'p.value')])#
exp_slope <- subset(aloha_lm_day_df, term == 'sunhour')#
    colnames(exp_slope) <-  c("pop", "date", "term", "r", "r_se", "r_p")#
exp_int <- subset(aloha_lm_day_df, term == '(Intercept)')#
    colnames(exp_int) <-  c("pop", "date", "term", "log_Qc0", "log_Qc0_se", "log_Qc0_p")#
#
tform_exp <- merge(subset(exp_slope, select = -c(term)), subset(exp_int, select = -c(term)), by = c('pop', 'date'))#
tform_exp <- merge(Qc_mean, tform_exp)#
#
tform_exp$r_p[which(tform_exp$r_p >= 0.05)] <- NA   # Remove insignificant linear regressions#
tform_exp <- tform_exp[!is.na(tform_exp$r_p), ]   # Remove flagged p.values#
tform_exp$r[which(tform_exp$r <= 0)] <- NA   # Remove negative C fixation estimates#
tform_exp <- tform_exp[!is.na(tform_exp$r), ]  # Remove lines with NA C fixation estimate#
tform_exp$data_day[which(tform_exp$data_day < 6)] <- NA    # Tag days when first and last data points are less than 6 hours apart#
tform_exp <- tform_exp[!is.na(tform_exp$data_day), ]  # Remove lines with short data days
r_stats <- tform_exp %>%#
    group_by(pop) %>%#
    summarize(r_mean = mean(r), r_sd = sd(r), r_med = median(r), r_IQR = IQR(r), #
              r_25 = quantile(r, probs = c(0.25)), r_75 = quantile(r, probs = c(0.75)),#
              r_min = min(r), r_max = max(r))#
#
r_stats$mean_plus_6sd <- r_stats$r_mean + 6*r_stats$r_sd#
#
tform_exp$r[which(tform_exp$r > 0.3)] <- NA   # Remove exceptionally high rates#
tform_exp <- tform_exp[!is.na(tform_exp$r), ]#
#
tform_exp$rmax <- tform_exp$r + tform_exp$r_se#
tform_exp$rmin <- tform_exp$r - tform_exp$r_se#
#
tform_exp$year <- lubridate::year(tform_exp$date)#
tform_exp$month <- lubridate::month(tform_exp$date)#
# Split double cruises by bumping late month cruises to the next month for KM2011/HOT323#
mo_list_date <- c("2020-09-27", "2020-09-28", "2020-09-29")    #
ind_mo <- which(as.character(tform_exp$date) %in% mo_list_date)#
tform_exp$month[ind_mo] <- tform_exp$month[ind_mo] + 1
fig_name <- "../figures/HOT_C_specific_growth_daily_sd.pdf"#
pdf(fig_name, width = 15, height = 8)#
g <- ggplot2::ggplot(tform_exp, aes(x = year, y = r)) +#
    ggplot2::geom_linerange(ggplot2::aes(x = year, ymin = rmin, ymax = rmax), color = prog.colors[1]) +#
    ggplot2::geom_point(pch = 21, size = 3, fill = prog.colors[1]) +#
    ggplot2::facet_grid(rows = vars(pop), cols = vars(month)) +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::labs(y = unname(latex2exp::TeX('Net scatter-based specific growth rate (h$^{-1}$)')), x = 'Year')#
print(g)#
dev.off()
print(g)
HOT_pp_read <- read.csv(paste0('../Data/HOT_primary_production.txt'), skip = 3, na.strings = "-9")#
units <- HOT_pp_read[1, ]#
HOT_pp <- HOT_pp_read[-1, 2:15]#
HOT_pp <- as.data.frame(sapply(HOT_pp, as.numeric))#
HOT_pp$date <- stringr::str_pad(HOT_pp$date, 6, pad = "0")#
HOT_pp$stime <- stringr::str_pad(HOT_pp$stime, 4, pad = "0")#
HOT_pp$etime <- stringr::str_pad(HOT_pp$etime, 4, pad = "0")#
d_HOT <- as.POSIXct(paste0(HOT_pp$date), format = '%y%m%d', tz = 'HST')#
dt1_HOT <- as.POSIXct(paste0(HOT_pp$date, ' ', HOT_pp$stime), format = '%y%m%d %H%M', tz = 'HST')#
dt2_HOT <-  as.POSIXct(paste0(HOT_pp$date, ' ', HOT_pp$etime), format = '%y%m%d %H%M', tz = 'HST')#
HOT_pp$Date <- d_HOT#
HOT_pp$date_start <- dt1_HOT#
HOT_pp$date_end <- dt2_HOT#
#
HOT_pp$l12[which(HOT_pp$l12 == -9)] <- NA#
HOT_pp$year <- lubridate::year(HOT_pp$Date)#
HOT_pp$day <- lubridate::yday(HOT_pp$Date)#
HOT_pp$month <- lubridate::month(HOT_pp$Date)#
# Split double cruises by bumping late month cruises to the next month for KM2011/HOT323#
mo_list_date <- c("2020-09-26")   #
ind_mo <- which(as.character(HOT_pp$Date) %in% mo_list_date)#
HOT_pp$month[ind_mo] <- HOT_pp$month[ind_mo] + 1#
#
# C fixation from SeaFlow
abund_dawn <- all_aloha_light %>%#
    group_by(pop, cruise, date) %>%#
    summarise(abundance_dawn = first(abundance), Qc_dawn = first(Qc), Qc_min = min(Qc))#
#
SF_PP <- merge(abund_dawn, tform_exp, by = c('date', 'pop'))  # Note:  date is local date.  It keeps sequential hours of daylight together#
#
sun <- suncalc::getSunlightTimes(date = as.Date(SF_PP$date, tz = "HST"), lat = lat, lon = lon, keep = c('sunrise', 'sunset'), tz = "HST")#
daylength <- as.double(sun$sunset - sun$sunrise, units = "hours")#
SF_PP$daylength <- daylength#
#
SF_PP$year <- lubridate::year(SF_PP$date) #
SF_PP$day <- lubridate::yday(SF_PP$date) #
SF_PP$PP_exp <- SF_PP$abundance_dawn*(exp(SF_PP$log_Qc0))*(exp(SF_PP$r*SF_PP$daylength) - 1) # Estimate net primary production#
SF_PP$pop <- factor(SF_PP$pop, levels = c('croco', 'euk', 'synecho', 'prochloro'))    # Reverse order to put most numerous on bottom
PP_cruise <- HOT_pp %>%#
    group_by(month, year) %>%#
    summarize(mean_PP = mean(l12, na.rm = TRUE))#
#
SF_cruise <- SF_PP %>%#
    group_by(pop, month, year) %>%#
    summarize(mean_PP = mean(PP_exp, na.rm = TRUE))
PCH <- HOT_Clive[, c('month', 'year')]#
PCH$param <- 'Biomass'#
PCH$value <- HOT_Clive$C_live_250#
PCH$min <- HOT_Clive$C_live_150#
PCH$max <- HOT_Clive$C_live_400#
#
PPH <- PP_cruise[, c('month', 'year')]#
PPH$param <- 'Productivity'#
PPH$value <- PP_cruise$mean_PP#
PPH$min <- NA#
PPH$max <- NA#
#
C_HOT <- rbind(PCH, PPH)#
C_HOT$param <- factor(C_HOT$param, levels = c('Biomass', 'Productivity'))#
C_HOT$mo_yr <- paste0(month.abb[C_HOT$month], ' ', C_HOT$year)#
SF_moyr <- unique(paste0(month.abb[aloha_long$month], ' ', aloha_long$year))   # List of month-year pairs with SeaFlow data#
C_HOT_incl <- C_HOT[which(C_HOT$mo_yr %in% SF_moyr), ]         # Allow only HOT data with SeaFlow counterpart
BMSF <- all_aloha_cruise[, c('pop', 'month', 'year')]#
BMSF$param <- 'Biomass'#
BMSF$value <-  all_aloha_cruise$mean_biomass#
#
PPSF <- SF_cruise[, c('pop', 'month', 'year')]#
PPSF$param <- 'Productivity'#
PPSF$value <- SF_cruise$mean_PP#
#
C_SF <- rbind(BMSF, PPSF)#
C_SF$param <- factor(C_SF$param, levels = c('Biomass', 'Productivity'))#
C_SF$pop <- factor(C_SF$pop, levels = c('croco', 'euk', 'synecho', 'prochloro'))
p <- ggplot2::ggplot(C_SF, aes(x = year)) +#
    ggplot2::geom_bar(aes(y = value, fill = pop), alpha = 0.5, color = NA, position = 'stack', stat = "identity") +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_fill_manual(values = group.colors) +#
    ggplot2::guides(fill = ggplot2::guide_legend(title = "population")) +#
    ggplot2::geom_linerange(data = C_HOT_incl, aes(x = year, ymin = min, ymax = max, color = 'HOT')) +#
    ggplot2::geom_point(data = C_HOT_incl, aes(y = value, color = 'HOT'), fill = 'white', pch = 21, size = 3, alpha = 1) +#
    ggplot2::scale_color_manual(name = "", values = c("HOT" = "black")) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::facet_grid(cols = vars(month), rows = vars(param), scales = 'free_y') +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::labs(x = 'Year', y = unname(latex2exp::TeX('Productivity ($\\mu$g C L$^{-1}$ d$^{-1}$) or Biomass ($\\mu$g C L$^{-1}$)')))#
print(p)
fig_name <- "../Figures/HOT_all_carbon_stacked_per_cruise.pdf"#
pdf(fig_name, width = 15, height = 8)#
p <- ggplot2::ggplot(C_SF, aes(x = year)) +#
    ggplot2::geom_bar(aes(y = value, fill = pop), alpha = 0.5, color = NA, position = 'stack', stat = "identity") +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_fill_manual(values = group.colors) +#
    ggplot2::guides(fill = ggplot2::guide_legend(title = "population")) +#
    ggplot2::geom_linerange(data = C_HOT_incl, aes(x = year, ymin = min, ymax = max, color = 'HOT')) +#
    ggplot2::geom_point(data = C_HOT_incl, aes(y = value, color = 'HOT'), fill = 'white', pch = 21, size = 3, alpha = 1) +#
    ggplot2::scale_color_manual(name = "", values = c("HOT" = "black")) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::facet_grid(cols = vars(month), rows = vars(param), scales = 'free_y') +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::labs(x = 'Year', y = unname(latex2exp::TeX('Productivity ($\\mu$g C L$^{-1}$ d$^{-1}$) or Biomass ($\\mu$g C L$^{-1}$)')))#
print(p)#
dev.off()
croco_A <- dplyr::filter(aloha_long_mean[, c("yday", "month", "year", "pop", "abundance", "biomass_mean")], pop == "croco")#
croco_PP <- dplyr::filter(SF_PP[, c("date", "pop", "r", "year", "month", "PP_exp")], pop == "croco")#
croco_PP$day <- lubridate::yday(croco_PP$date)#
croco_Nfix <- merge(croco_A, croco_PP)#
#
croco_Nfix$bloom <- "No"#
ind1 <- which(croco_Nfix$month == 8 & croco_Nfix$year == 2016)#
ind2 <- which(croco_Nfix$month == 8 & croco_Nfix$year == 2017)#
ind3 <- which(croco_Nfix$month == 8 & croco_Nfix$year == 2019)#
ind4 <- which(croco_Nfix$month == 9 & croco_Nfix$year == 2019)#
croco_Nfix$bloom[c(ind1, ind2, ind3, ind4)] <- "Yes"#
#
Npcell <- 7.3/(0.4*10^6)	# mol N cell^-1 d^-1 (Wilson et al, 2017)#
Npcell_max <- Npcell + 1.5/(0.4*10^6)	# sd of croco N2 fixation is 1.5 nmol N L^-1 d^-1#
Npcell_min <-  Npcell - 1.5/(0.4*10^6)	#
#
croco_Nfix$Nfix <- croco_Nfix$abundance*(10^6)*Npcell#
croco_Nfix$Nmax <- croco_Nfix$abundance*(10^6)*Npcell_max#
croco_Nfix$Nmin <- croco_Nfix$abundance*(10^6)*Npcell_min#
#
C2N <- 6.6 	# Wilson et al, 2017#
g2mol <- 12.01	# Atomic weight of carbon#
ng2ug <- 10^3	# convert ng to ug#
croco_Nfix$Csupp <- croco_Nfix$Nfix*C2N*g2mol/(ng2ug)	# Amount of carbon biomass that can be supported by N2 fixed (in ug C L^-1)#
croco_Nfix$Csupp_max <- croco_Nfix$Nmax*C2N*g2mol/(ng2ug)#
croco_Nfix$Csupp_min <- croco_Nfix$Nmin*C2N*g2mol/(ng2ug)#
#
g1 <- ggplot(croco_Nfix) +#
  geom_abline(slope = 1, intercept = 0) +#
  ggplot2::geom_linerange(ggplot2::aes(x = PP_exp, ymin = Csupp_min, ymax = Csupp_max, color = bloom)) +#
  ggplot2::geom_point(aes(x = PP_exp, y = Csupp, fill = bloom), pch = 21, size = 3) +#
  labs(x = unname(latex2exp::TeX("Crocosphaera scatter-based production ($\\mu$g C L$^{-1}$ d$^{-1}$)")), y = unname(latex2exp::TeX("Carbon biomass supported by Crocosphaera N$_2$ fixation ($\\mu$g C L$^{-1}$ d$^{-1}$)"))) +#
  theme_bw(base_size = 18)#
#
g2 <- ggplot(croco_Nfix) +#
  geom_abline(slope = 1, intercept = 0) +#
  ggplot2::geom_linerange(ggplot2::aes(x = biomass_mean, ymin = Csupp_min, ymax = Csupp_max, color = bloom)) +#
  ggplot2::geom_point(aes(x = biomass_mean, y = Csupp, fill = bloom), pch = 21, size = 3) +#
  labs(x = unname(latex2exp::TeX("Crocosphaera biomass ($\\mu$g C L$^{-1}$)")), y = unname(latex2exp::TeX("Carbon biomass supported by Crocosphaera N$_2$ fixation ($\\mu$g C L$^{-1}$ d$^{-1}$)"))) +#
  theme_bw(base_size = 18)#
#
png(file = "../Figures/Croco_N2_fix_support_C.png", width = 6000, height = 3200, res = 300)#
t <- grid::textGrob("Crocosphaera carbon supported by N2 fixation", gp = gpar(fontsize = 18))#
grid.arrange(g1, g2, ncol = 2, top = t)#
dev.off()
head(C_SF)
head(C_HOT_incl)
HOT_Clive
PCH$value <- HOT_Clive$PC
PCH$min <- NA
PCH$max <- NA
C_HOT <- rbind(PCH, PPH)
C_HOT$param <- factor(C_HOT$param, levels = c('Biomass', 'Productivity'))#
C_HOT$mo_yr <- paste0(month.abb[C_HOT$month], ' ', C_HOT$year)#
SF_moyr <- unique(paste0(month.abb[aloha_long$month], ' ', aloha_long$year))   # List of month-year pairs with SeaFlow data#
C_HOT_incl <- C_HOT[which(C_HOT$mo_yr %in% SF_moyr), ]         # Allow only HOT data with SeaFlow counterpart
p <- ggplot2::ggplot(C_SF, aes(x = year)) +#
    ggplot2::geom_bar(aes(y = value, fill = pop), alpha = 0.5, color = NA, position = 'stack', stat = "identity") +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_fill_manual(values = group.colors) +#
    ggplot2::guides(fill = ggplot2::guide_legend(title = "population")) +#
    ggplot2::geom_linerange(data = C_HOT_incl, aes(x = year, ymin = min, ymax = max, color = 'HOT')) +#
    ggplot2::geom_point(data = C_HOT_incl, aes(y = value, color = 'HOT'), fill = 'white', pch = 21, size = 3, alpha = 1) +#
    ggplot2::scale_color_manual(name = "", values = c("HOT" = "black")) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::facet_grid(cols = vars(month), rows = vars(param), scales = 'free_y') +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::labs(x = 'Year', y = unname(latex2exp::TeX('Productivity ($\\mu$g C L$^{-1}$ d$^{-1}$) or Biomass ($\\mu$g C L$^{-1}$)')))#
print(p)
p <- ggplot2::ggplot(C_SF, aes(x = year)) +#
    ggplot2::geom_bar(aes(y = value, fill = pop), alpha = 0.5, color = NA, position = 'stack', stat = "identity") +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_fill_manual(values = group.colors) +#
    ggplot2::guides(fill = ggplot2::guide_legend(title = "population")) +#
    #ggplot2::geom_linerange(data = C_HOT_incl, aes(x = year, ymin = min, ymax = max, color = 'HOT')) +#
    ggplot2::geom_point(data = C_HOT_incl, aes(y = value, color = 'HOT'), fill = 'white', pch = 21, size = 3, alpha = 1) +#
    ggplot2::scale_color_manual(name = "", values = c("HOT" = "black")) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::facet_grid(cols = vars(month), rows = vars(param), scales = 'free_y') +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::labs(x = 'Year', y = unname(latex2exp::TeX('Productivity ($\\mu$g C L$^{-1}$ d$^{-1}$) or Biomass ($\\mu$g C L$^{-1}$)')))#
print(p)
POC_head
head(HOT_Clive)
HOT_Clive$PC_ugpL <- HOT_Clive$PC*umolpkg2ugpL#
HOT_Clive$C_live_150 <- HOT_Clive$PC_ugpL*HOT_Clive$pc_live_150#
HOT_Clive$C_live_250 <- HOT_Clive$PC_ugpL*HOT_Clive$pc_live_250#
HOT_Clive$C_live_400 <- HOT_Clive$PC_ugpL*HOT_Clive$pc_live_400
HOT_Clive <- na.omit(HOT_Clive)
PCH <- HOT_Clive[, c('month', 'year')]
PCH$param <- 'Biomass'
PCH$value <- HOT_Clive$PC_ugpL
PCH
PCH$min <- NA
PCH$max <- NA
C_HOT <- rbind(PCH, PPH)
p <- ggplot2::ggplot(C_SF, aes(x = year)) +#
    ggplot2::geom_bar(aes(y = value, fill = pop), alpha = 0.5, color = NA, position = 'stack', stat = "identity") +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_fill_manual(values = group.colors) +#
    ggplot2::guides(fill = ggplot2::guide_legend(title = "population")) +#
    #ggplot2::geom_linerange(data = C_HOT_incl, aes(x = year, ymin = min, ymax = max, color = 'HOT')) +#
    ggplot2::geom_point(data = C_HOT_incl, aes(y = value, color = 'HOT'), fill = 'white', pch = 21, size = 3, alpha = 1) +#
    ggplot2::scale_color_manual(name = "", values = c("HOT" = "black")) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::facet_grid(cols = vars(month), rows = vars(param), scales = 'free_y') +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::labs(x = 'Year', y = unname(latex2exp::TeX('Productivity ($\\mu$g C L$^{-1}$ d$^{-1}$) or Biomass ($\\mu$g C L$^{-1}$)')))#
print(p)
HOT_Clive
head(PCH)
C_HOT <- rbind(PCH, PPH)
C_HOT$param <- factor(C_HOT$param, levels = c('Biomass', 'Productivity'))
C_HOT$mo_yr <- paste0(month.abb[C_HOT$month], ' ', C_HOT$year)
SF_moyr <- unique(paste0(month.abb[aloha_long$month], ' ', aloha_long$year))   # List of month-year pairs with SeaFlow data
C_HOT_incl <- C_HOT[which(C_HOT$mo_yr %in% SF_moyr), ]         # Allow only HOT data with SeaFlow counterpart
p <- ggplot2::ggplot(C_SF, aes(x = year)) +#
    ggplot2::geom_bar(aes(y = value, fill = pop), alpha = 0.5, color = NA, position = 'stack', stat = "identity") +#
    ggplot2::theme_bw(base_size = 18) +#
    ggplot2::scale_fill_manual(values = group.colors) +#
    ggplot2::guides(fill = ggplot2::guide_legend(title = "population")) +#
    #ggplot2::geom_linerange(data = C_HOT_incl, aes(x = year, ymin = min, ymax = max, color = 'HOT')) +#
    ggplot2::geom_point(data = C_HOT_incl, aes(y = value, color = 'HOT'), fill = 'white', pch = 21, size = 3, alpha = 1) +#
    ggplot2::scale_color_manual(name = "", values = c("HOT" = "black")) +#
    ggplot2::scale_x_continuous(breaks=seq(2014, 2021, 1), labels=c("2014", '',  "2016", '', '2018', '', '2020', ''), minor_breaks = seq(2015, 2021, 2)) +#
    ggplot2::facet_grid(cols = vars(month), rows = vars(param), scales = 'free_y') +#
    ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +#
    ggplot2::labs(x = 'Year', y = unname(latex2exp::TeX('Productivity ($\\mu$g C L$^{-1}$ d$^{-1}$) or Biomass ($\\mu$g C L$^{-1}$)')))#
print(p)
fig_name <- "../Figures/HOT_all_carbon_stacked_per_cruise_total_PC.pdf"#
pdf(fig_name, width = 15, height = 8)
print(p)
dev.off()
q()
